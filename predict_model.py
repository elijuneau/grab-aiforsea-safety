import os
import pickle
import pandas as pd
import build_feature
import matplotlib.pyplot as plt
import seaborn as sns

class DangerousDrivingClassifier:
    """
    A classification model to detect dangerous driving trips 
    using telematics data (accelerometer, gyroscope and GPS). 
    
    Parameters
    ----------
    weights_dir: string
        Directory that contains all the pre-trained model weights.
        Can be downloaded from link provided in README.md.
        
    Attributes
    ----------
    feature: DataFrame
        The feature generated from raw telematics data.
    
    output: None or DataFrame
        The predictions made by pre-trained models. Only available
        after method predict() is called. 
        
    """
    def __init__(self, weights_dir):
        self.output = None
        
        # load build features weights
        with open(os.path.join(weights_dir, 'build_features.dat'), 'rb') as f:
            self._TELE_IQR = pickle.load(f)
            self._WIN_MEAN_STD = pickle.load(f)
            self._gyro_pca_loaded  = pickle.load(f)
            self._clustering_loaded = pickle.load(f)

        # load model configuration file
        with open(os.path.join(weights_dir, 'model_config.dat'), 'rb') as f:
            self._model_config = pickle.load(f)
    
        # load weak learners
        with open(os.path.join(weights_dir, 'weak_learner.dat'), 'rb') as f:  
            self._weak1  = pickle.load(f)
            self._weak2  = pickle.load(f)
    
        # load strong learners
        with open(os.path.join(weights_dir, 'strong_learner.dat'), 'rb') as f:
            self._strong1  = pickle.load(f) 
            self._strong2  = pickle.load(f)
            self._strong3  = pickle.load(f)

        with open(os.path.join(weights_dir, 'meta_learner.dat'), 'rb') as f:  
            self._meta  = pickle.load(f)
                                                
    def predict(self, data_dir):
        """
        Predict the probability of being classified as dangerous trip using
        the features generated by build_feature library.
        
        Parameters
        ----------
        data_dir: string
            Directory containing the raw telematics data file.
        
        Returns
        -------
        output: DataFrame, columns = ['bookingID', 'prob', 'label']
            A DataFrame containing the the predictions (label and probability) 
            from our model. 
            
        """
        
        # read & generate features from raw data
        print('... (0/5) reading data ... ')
        tele = pd.read_csv(data_dir, dtype = {'bookingID': 'object'})
        self.feature = build_feature.build_feature(tele, self._TELE_IQR, self._WIN_MEAN_STD,
                                                   self._gyro_pca_loaded, self._clustering_loaded)
        
        # layer 1 : weak learners (predict on selected columns)
        pred1 = self._weak1.predict_proba(self.feature.loc[:, self._model_config['mlp']['col_names']])[:, 1]
        pred2 = self._weak2.predict_proba(self.feature.loc[:, self._model_config['naivebayes']['col_names']])[:, 1]
        avg = (pred1 + pred2) / 2
        self.feature['avg'] = avg
        
        # layer 2: strong learners (predict on selected columns + 'avg')
        pred3 = self._strong1.predict_proba(self.feature.loc[:, self._model_config['logistic']['col_names'] + ['avg']])[:, 1]
        pred4 = self._strong2.predict_proba(self.feature.loc[:, self._model_config['lda']['col_names'] + ['avg']])[:, 1]
        pred5 = self._strong3.predict_proba(self.feature.loc[:, self._model_config['xgboost']['col_names'] + ['avg']])[:, 1]
        df = pd.DataFrame([])
        df['logistic'] = pred3
        df['lda'] = pred4
        df['xgboost'] = pred5
        
        # layer 3: meta learners
        final_pred = self._meta.predict_proba(df)[:, 1]
        
        # output in pandas DataFrame format
        self.output = pd.DataFrame([])
        self.output['bookingID'] = self.feature.bookingID
        self.output['prob'] = final_pred
        self.output['label'] = [0 if x <= 0.5 else 1 for x in self.output.prob]
        
        return self.output
    
    def generate_report(self):
        """
        Generate reports for the predictions made. 
            (First Report): Distribution of safe, average and dangerous trips.
            (Second Report): Proportion of safe and dangerous trips in the raw input
                             data.
        """
        if self.output is None:
            raise Exception("You haven't make predictions on the telematics data yet. Please run predict() method.")
        
        # distribution of predictions
        sns.distplot(self.output.loc[self.output.prob <= 0.33, 'prob'] , color="green", label="Safe")
        sns.distplot(self.output.loc[(self.output.prob > 0.33) & (self.output.prob <= 0.66), 'prob'] , color="skyblue", label="Average")
        sns.distplot(self.output.loc[self.output.prob > 0.66, 'prob'] , color="red", label="Dangerous")
        plt.title("Distribution of Model Output")
        plt.xlabel("Probability to Be Tagged as Dangerous.")
        plt.ylabel("Density")
        plt.legend()
        plt.show()
        
        # barplot of predicted labels
        prop = self.output.label.value_counts()
        sns.barplot(prop.index, prop)
        plt.title('Proportion of Safe and Dangerous Trips')
        plt.ylabel('Count')
        plt.xticks([0, 1], ["Safe Trip", "Dangerous Trip"])
        plt.show()